module Common

exports

  lexical syntax
  
    [a-z][a-zA-Z0-9]*    -> LowerId
    [A-Z][a-zA-Z0-9]*    -> UpperId
    [a-zA-Z][a-zA-Z0-9]* -> Id
    
    "-"? [0-9]+            -> Int
    "-"? [0-9]* "." [0-9]+ -> Float
    
    "\"" StringChar* "\"" -> STRING
    ~[\"\n]               -> StringChar
    "\\\""                -> StringChar
    BackSlashChar         -> StringChar
    "\\"                  -> BackSlashChar
    
    [\ \t\n\r] -> LAYOUT
    
    [\*]                             -> CommentChar
    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
    "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
    
    -> EOF
    
  "inverse"   -> LowerId {reject}
  "transpose" -> LowerId {reject}
  "symmetric" "orthogonal" "positive-definite" "singular" "invertible" -> LowerId {reject}
  
  lexical restrictions
  
    %% Ensure greedy matching for lexicals
  
    CommentChar   -/- [\/]
    Int           -/- [0-9\.]
    Float         -/- [0-9]
    Id            -/- [a-zA-Z0-9\_]
    LowerId       -/- [a-zA-Z0-9\_]
    UpperId       -/- [a-zA-Z0-9\_]
    
    %% EOF may not be followed by any char
    
    EOF           -/- ~[]

    %% Backslash chars in strings may not be followed by " 
    
    BackSlashChar -/- [\"]

  context-free restrictions
  
    %% Ensure greedy matching for comments

    LAYOUT? -/- [\ \t\n\r]
    LAYOUT? -/- [\/].[\/]
    LAYOUT? -/- [\/].[\*]
